// Generated by CoffeeScript 1.4.0
(function() {
  var HexController;

  HexController = (function() {

    HexController.prototype.url_board = null;

    HexController.prototype.url_progress = null;

    HexController.prototype.url_move = null;

    HexController.prototype.update_interval = null;

    HexController.prototype.hexagon_radius = null;

    HexController.prototype.update = true;

    HexController.prototype.point_start = null;

    HexController.prototype.point_end = null;

    HexController.prototype.colors = {
      background: createjs.Graphics.getRGB(32, 38, 35),
      hex_border: createjs.Graphics.getRGB(63, 159, 112),
      hex_fill: createjs.Graphics.getRGB(6, 59, 33)
    };

    function HexController(container_id) {
      this.container_id = container_id;
      this.hexagon_width = this.hexagon_radius * Math.sqrt(3);
    }

    HexController.prototype.drawBackground = function() {
      var shape;
      shape = new createjs.Shape();
      shape.graphics.beginFill(this.colors.background);
      shape.graphics.rect(0, 0, this.width, this.height);
      return this.stage.addChild(shape);
    };

    HexController.prototype.show_arrow = function(point_start, point_end) {
      if (Math.abs(point_end.x - point_start.x) > this.hexagon_width + 1) {
        return;
      }
      if (Math.abs(point_end.y - point_start.y) > this.hexagon_width + 1) {
        return;
      }
      this.temp_arrow.x = point_start.x;
      this.temp_arrow.y = point_start.y;
      this.temp_arrow.rotation = this.angle_from_points(point_start, point_end);
      return this.temp_arrow;
    };

    HexController.prototype.new_hexagon = function(x, y) {
      var hex_game, hexagon;
      hexagon = new createjs.Shape();
      hexagon.graphics.setStrokeStyle(10, "round");
      hexagon.graphics.beginStroke(this.colors.hex_border);
      hexagon.graphics.beginFill(this.colors.hex_fill);
      hexagon.graphics.drawPolyStar(0, 0, this.hexagon_radius, 6, 0, -90);
      hexagon.x = x;
      hexagon.y = y;
      hex_game = this;
      hexagon.onMouseOver = function(e) {
        if (hex_game.point_start) {
          hex_game.point_end = e.target;
          hex_game.temp_arrow.visible = true;
          return hex_game.update = true;
        }
      };
      hexagon.onPress = function(e) {
        hex_game.point_start = e.target;
        return e.onMouseUp = function(ev) {
          hex_game.point_start = null;
          hex_game.point_end = null;
          return hex_game.update = true;
        };
      };
      return hexagon;
    };

    HexController.prototype.new_arrow = function(x, y, rotation) {
      var arrow, coef, i, num_arrows, offset_x, offset_y, scaled_size, size, _i;
      arrow = new createjs.Shape();
      size = 40;
      arrow.regX = size;
      arrow.regY = size * 2;
      num_arrows = "";
      coef = 0.75;
      scaled_size = size;
      for (i = _i = 1; _i <= 5; i = ++_i) {
        offset_x = size - scaled_size / 2;
        offset_y = offset_x * 3 - size;
        arrow.graphics.moveTo(offset_x, offset_y);
        arrow.graphics.setStrokeStyle(scaled_size / 7);
        arrow.graphics.beginStroke("#AAAAAA");
        arrow.graphics.lineTo(offset_x + scaled_size / 2, offset_y - scaled_size / 2);
        arrow.graphics.lineTo(offset_x + scaled_size, offset_y);
        arrow.graphics.endStroke();
        scaled_size = scaled_size * coef;
      }
      arrow.rotation = (rotation ? rotation : 0);
      arrow.x = x;
      arrow.y = y;
      return arrow;
    };

    HexController.prototype.init_board = function(json) {
      /*
          A callback function for board details
          Initialize board by drawing into stage
      */

      var board, cell, cell_rows, offset_x, offset_y, pos_x, pos_y, shape, user_id, x, y;
      user_id = $("#user_id").val();
      board = json[json.board_id];
      console.log(this);
      console.log(this.hexagon_radius);
      console.log(hex_game.hexagon_radius);
      hex_game.cells = [];
      offset_x = 100;
      offset_y = 100;
      for (y in board) {
        cell_rows = new Array();
        for (x in board[y]) {
          if (!board[y][x]) {
            continue;
          }
          pos_x = hex_game.hexagon_width * x + (y % 2) * hex_game.hexagon_width / 2;
          pos_y = hex_game.hexagon_radius * 1.5 * y;
          shape = hex_game.new_hexagon(offset_x + pos_x, offset_y + pos_y);
          cell = {
            arrow: null,
            hexagon: shape
          };
          hex_game.stage.addChild(shape);
          cell_rows[x] = cell;
        }
        hex_game.cells.push(cell_rows);
      }
    };

    HexController.prototype.start = function() {
      var $canvas, $container;
      $canvas = $('<canvas></canvas>');
      $container = $(this.container_id).append($canvas);
      this.set_nondraggable($container);
      this.width = $container.width();
      this.height = $container.height();
      $canvas.attr({
        width: this.width,
        height: this.height
      });
      this.stage = new createjs.Stage($canvas.get(0));
      this.stage.enableMouseOver();
      this.ajax(this.url_board, 2000, {
        board_id: 'board1'
      }, this.init_board);
      this.drawBackground();
      this.fpsLabel = new createjs.Text("-- fps", "bold 18px Arial", "#000");
      this.stage.addChild(this.fpsLabel);
      this.fpsLabel.x = 10;
      this.fpsLabel.y = 20;
      this.temp_arrow = this.new_arrow(0, 0, null);
      this.stage.addChild(this.temp_arrow);
      this.stage.update();
      createjs.Ticker.addListener(this);
      return createjs.Ticker.setFPS(50);
    };

    HexController.prototype.tick = function() {
      if (this.update) {
        if (this.point_start && this.point_end) {
          if (this.point_start.x !== this.point_end.x || this.point_start.y !== this.point_end.y) {
            this.show_arrow(this.point_start, this.point_end);
          }
        } else {
          this.temp_arrow.visible = false;
        }
        this.fpsLabel.text = Math.round(createjs.Ticker.getMeasuredFPS()) + " fps";
        this.update = false;
        return this.stage.update();
      }
    };

    HexController.prototype.set_nondraggable = function(element) {
      return $(element).on('dragstart', function(e) {
        e.preventDefault();
      });
    };

    HexController.prototype.angle_from_points = function(point_start, point_end) {
      var a, angle, b, c;
      b = point_end.y - point_start.y;
      c = point_end.x - point_start.x;
      a = Math.sqrt(b * b + c * c);
      angle = Math.acos(b / a) * 180 / Math.PI;
      if (c > 0) {
        angle = 360 - angle;
      }
      angle += 180;
      return angle;
    };

    HexController.prototype.ajax = function(url, timeout, data, successFunc) {
      var self;
      self = this;
      return $.ajax({
        url: url,
        dataType: "json",
        data: data,
        cache: false,
        timeout: timeout,
        error: function(xhr, msg) {},
        success: (function(json) {
          console.log(this);
          return function(json) {
            return successFunc(json);
          };
        })(self)
      });
    };

    return HexController;

  })();

  this.init_game = function(playground) {
    return new HexController(playground);
  };

}).call(this);
