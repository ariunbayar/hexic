// Generated by CoffeeScript 1.4.0
(function() {
  var Arrow, Hexagon, angleFromPoints, colors, hex, update;

  update = true;

  colors = {
    background: createjs.Graphics.getRGB(32, 38, 35),
    hex_border: createjs.Graphics.getRGB(63, 159, 112),
    hex_fill: createjs.Graphics.getRGB(6, 59, 33)
  };

  Hexagon = function(x, y, hex_radius) {
    var hexagon, radius;
    radius = (hex_radius ? hex_radius : 50);
    hexagon = new createjs.Shape();
    hexagon.graphics.setStrokeStyle(10, "round");
    hexagon.graphics.beginStroke(colors.hex_border);
    hexagon.graphics.beginFill(colors.hex_fill);
    hexagon.graphics.drawPolyStar(0, 0, radius, 6, 0, -90);
    hexagon.x = x;
    hexagon.y = y;
    hexagon.onMouseOver = function(e) {
      if (hex.point_start) {
        hex.point_end = e.target;
        hex.temp_arrow.visible = true;
        return update = true;
      }
    };
    hexagon.onPress = function(e) {
      hex.point_start = e.target;
      return e.onMouseUp = function(ev) {
        hex.point_start = 0;
        hex.point_end = 0;
        return update = true;
      };
    };
    return hexagon;
  };

  Arrow = function(x, y, rotation) {
    var arrow, coef, i, num_arrows, offset_x, offset_y, scaled_size, size;
    arrow = new createjs.Shape();
    size = 40;
    arrow.regX = size;
    arrow.regY = size * 2;
    num_arrows = "";
    coef = 0.75;
    scaled_size = size;
    i = 0;
    while (i < 5) {
      offset_x = size - scaled_size / 2;
      offset_y = offset_x * 3 - size;
      arrow.graphics.moveTo(offset_x, offset_y);
      arrow.graphics.setStrokeStyle(scaled_size / 7);
      arrow.graphics.beginStroke("#AAAAAA");
      arrow.graphics.lineTo(offset_x + scaled_size / 2, offset_y - scaled_size / 2);
      arrow.graphics.lineTo(offset_x + scaled_size, offset_y);
      arrow.graphics.endStroke();
      scaled_size = scaled_size * coef;
      i += 1;
    }
    arrow.rotation = (rotation ? rotation : 0);
    arrow.x = x;
    arrow.y = y;
    return arrow;
  };

  angleFromPoints = function(point_start, point_end) {
    var a, angle, b, c;
    a = void 0;
    b = void 0;
    c = void 0;
    angle = void 0;
    b = point_end.y - point_start.y;
    c = point_end.x - point_start.x;
    a = Math.sqrt(b * b + c * c);
    angle = Math.acos(b / a) * 180 / Math.PI;
    if (c > 0) {
      angle = 360 - angle;
    }
    angle += 180;
    return angle;
  };

  /*
  Hexagon game logic
  */


  hex = {
    stage: null,
    fpsLabel: null,
    board: [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 0, 1], [1, 1, 0, 0, 1], [1, 1, 1, 1, 1]],
    point_start: null,
    point_end: null,
    hexagon_radius: 50,
    hexagon_width: null,
    cells: [],
    temp_arrow: null,
    arrow: null,
    hexagon: null,
    width: null,
    height: null
  };

  window.hex = hex;

  hex.init = function(container_id) {
    var $canvas, $container, cell, cell_rows, offset_x, offset_y, pos_x, pos_y, shape, stage, x, y;
    $canvas = $('<canvas></canvas>');
    $container = $(container_id).append($canvas);
    hex.width = $container.width();
    hex.height = $container.height();
    $canvas.attr({
      width: hex.width,
      height: hex.height
    });
    stage = void 0;
    stage = new createjs.Stage($canvas.get(0));
    stage.enableMouseOver();
    hex.stage = stage;
    hex.drawBackground();
    hex.temp_arrow = Arrow(0, 0, null);
    hex.hexagon_width = hex.hexagon_radius * Math.sqrt(3);
    offset_x = 100;
    offset_y = 100;
    y = 0;
    while (y < hex.board.length) {
      cell_rows = new Array();
      x = 0;
      while (x < hex.board[0].length) {
        x += 1;
        if (!hex.board[y][x]) {
          continue;
        }
        pos_x = hex.hexagon_width * x + (y % 2) * hex.hexagon_width / 2;
        pos_y = hex.hexagon_radius * 1.5 * y;
        shape = Hexagon(offset_x + pos_x, offset_y + pos_y, hex.hexagon_radius);
        cell = {
          arrow: null,
          hexagon: shape
        };
        stage.addChild(shape);
        cell_rows[x] = cell;
      }
      hex.cells.push(cell_rows);
      y += 1;
    }
    hex.fpsLabel = new createjs.Text("-- fps", "bold 18px Arial", "#000");
    stage.addChild(hex.fpsLabel);
    stage.addChild(hex.temp_arrow);
    hex.fpsLabel.x = 10;
    hex.fpsLabel.y = 20;
    stage.update();
    createjs.Ticker.addListener(hex);
    return createjs.Ticker.setFPS(50);
  };

  hex.drawBackground = function() {
    var shape;
    shape = new createjs.Shape();
    shape.graphics.beginFill(colors.background);
    shape.graphics.rect(0, 0, hex.width, hex.height);
    return hex.stage.addChild(shape);
  };

  hex.showArrow = function(point_start, point_end) {
    if (Math.abs(point_end.x - point_start.x) > hex.hexagon_width + 1) {
      return;
    }
    if (Math.abs(point_end.y - point_start.y) > hex.hexagon_width + 1) {
      return;
    }
    hex.temp_arrow.x = point_start.x;
    hex.temp_arrow.y = point_start.y;
    hex.temp_arrow.rotation = angleFromPoints(point_start, point_end);
    return hex.temp_arrow;
  };

  hex.tick = function() {
    if (update) {
      if (hex.point_start && hex.point_end) {
        if (hex.point_start.x !== hex.point_end.x || hex.point_start.y !== hex.point_end.y) {
          hex.showArrow(hex.point_start, hex.point_end);
        }
      } else {
        hex.temp_arrow.visible = false;
      }
      hex.fpsLabel.text = Math.round(createjs.Ticker.getMeasuredFPS()) + " fps";
      update = false;
      return hex.stage.update();
    }
  };

  document.getElementById("playground").ondragstart = function() {
    return false;
  };

}).call(this);
